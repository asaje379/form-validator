"use strict";import{ValidatorEngine as n}from"./engine";export class Validator{static required(r){return t=>n.required(t,r)}static pattern(r,t){return i=>n.pattern(r,i,t)}static min(r,t){return i=>n.min(r,i,t)}static max(r,t){return i=>n.max(r,i,t)}static url(r){return t=>n.url(t,r)}static email(r){return t=>n.email(t,r)}static password(r){return t=>n.password(t,r)}static minLength(r,t){return i=>n.minLength(r,i,t)}static maxLength(r,t){return i=>n.maxLength(r,i,t)}static decimal(r){return t=>n.decimal(t,r)}static alpha(r){return t=>n.alpha(t,r)}static alphanum(r){return t=>n.alphanum(t,r)}static minDate(r,t){return i=>n.minDate(r,i,t)}static maxDate(r,t){return i=>n.maxDate(r,i,t)}static validate(r,t){const i=[];let e=!0;for(const s of t){const a=s(r);a.msg&&i.push(a.msg),a.isValid||(e=!1)}return{isValid:e,messages:i}}}
